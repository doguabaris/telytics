/**
 * @file LogPayload.ts
 * @description Defines the structure of a telemetry log payload accepted by the collector.
 *
 * Each payload represents a structured event generated by the client SDK
 * and sent to the collector via HTTP.
 *
 * Logs are stored in newline-delimited JSON (NDJSON) format and may represent:
 *  - runtime errors,
 *  - user interactions,
 *  - transaction-related events.
 *
 * This interface is shared across the ingestion route and file logger.
 *
 * @example
 * ```json
 * {
 *   "type": "transaction",
 *   "message": "User staked tokens",
 *   "context": {
 *     "txId": "0xabc123",
 *     "amount": 500,
 *     "token": "SOL"
 *   },
 *   "timestamp": 1714430000000,
 *   "app": "my-dapp",
 *   "release": "v1.2.3"
 * }
 * ```
 *
 * @author     DoÄŸu Abaris <abaris@null.net>
 * @license    MIT
 * @see        ../routes/ingest.ts
 */

/**
 * Represents a single telemetry log entry sent from a client to the collector.
 */
export interface LogPayload {
	/** Log type classification. */
	type: 'error' | 'transaction' | 'info';

	/** Human-readable message or serialized error. */
	message: string;

	/** Optional metadata or contextual fields related to the event. */
	context?: Record<string, unknown>;

	/** Epoch timestamp in milliseconds when the log was generated. */
	timestamp: number;

	/** Application or service that generated the log. */
	app: string;

	/** Release version or build tag of the emitting application. */
	release: string;
}
